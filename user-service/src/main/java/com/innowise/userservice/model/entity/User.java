package com.innowise.userservice.model.entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a user entity in the database.
 * This entity is mapped to the "user" table.
 */
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(name = "users")
public class User {

    /**
     * The unique identifier for the user.
     * It is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The user's name.
     * Max length 50. Cannot be null.
     */
    @Column(length = 50, nullable = false)
    private String name;

    /**
     * The user's surname.
     * Max length 50. Cannot be null.
     */
    @Column(length = 50, nullable = false)
    private String surname;

    /**
     * The user's date of birth. Cannot be null.
     */
    @Column(nullable = false)
    private LocalDate birthDate;

    /**
     * The user's email. Must be unique and cannot be null.
     */
    @Column(nullable = false, unique = true)
    private String email;

    /**
     * A list of cards associated with this user.
     * The relationship is one-to-many, and all operations (e.g., save, delete)
     * are cascaded to the associated CardInfo entities.
     * If a user is deleted, all their cards will also be removed.
     */
    @Builder.Default
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<CardInfo> cardsInfo = new ArrayList<>();

    /**
     * Adds a card to the user's collection and establishes the bidirectional link.
     * @param cardInfo The CardInfo entity to add.
     */
    public void addCardInfo(CardInfo cardInfo) {
        this.cardsInfo.add(cardInfo);
        cardInfo.setUser(this);
    }

    /**
     * Removes a card from the user's collection and breaks the bidirectional link.
     * @param cardInfo The CardInfo entity to remove.
     */
    public void removeCardInfo(CardInfo cardInfo) {
        this.cardsInfo.remove(cardInfo);
        cardInfo.setUser(null);
    }

}

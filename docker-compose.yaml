services:
  user-service:
    image: user-service:1.0.0
    container_name: user-service
    env_file:
      - .env
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - '8081:8081'
    environment:
      SPRING_DATA_REDIS_HOST: ${USER_REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${USER_REDIS_PORT}
      SPRING_DATASOURCE_URL: ${USER_POSTGRES_URL}
      SPRING_DATASOURCE_USERNAME: ${USER_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_POSTGRES_PASSWORD}
    depends_on:
      user-service-postgres:
        condition: service_healthy
      user-service-redis:
        condition: service_started

  user-service-postgres:
    image: 'postgres:16.10'
    container_name: user-service-postgres
    env_file:
      - .env
    ports:
      - '5433:5432'
    environment:
      POSTGRES_DB: ${USER_POSTGRES_DB}
      POSTGRES_USER: ${USER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${USER_POSTGRES_USER} -d ${USER_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - user-service-postgres-data:/var/lib/postgresql/data

  user-service-redis:
    image: 'redis:7.4'
    container_name: user-service-redis
    env_file:
      - .env
    ports:
      - '6379:6379'
    volumes:
      - user-service-redis-data:/var/lib/redis/data

  authentication-service:
    image: authentication-service:1.0.0
    container_name: authentication-service
    env_file:
      - .env
    build:
      context: ./authentication-service
      dockerfile: Dockerfile
    ports:
      - '8082:8082'
    environment:
      SPRING_DATASOURCE_URL: ${AUTHENTICATION_POSTGRES_URL}
      SPRING_DATASOURCE_USERNAME: ${AUTHENTICATION_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${AUTHENTICATION_POSTGRES_PASSWORD}
    depends_on:
      authentication-service-postgres:
        condition: service_healthy

  authentication-service-postgres:
    image: 'postgres:16.10'
    container_name: authentication-service-postgres
    env_file:
      - .env
    ports:
      - '5434:5432'
    environment:
      POSTGRES_DB: ${AUTHENTICATION_POSTGRES_DB}
      POSTGRES_USER: ${AUTHENTICATION_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTHENTICATION_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${AUTHENTICATION_POSTGRES_USER} -d ${AUTHENTICATION_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - authentication-service-postgres-data:/var/lib/postgresql/data

  order-service:
    image: order-service:1.0.0
    container_name: order-service
    env_file:
      - .env
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - '8083:8083'
    environment:
      SPRING_DATASOURCE_URL: ${ORDER_POSTGRES_URL}
      SPRING_DATASOURCE_USERNAME: ${ORDER_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${ORDER_POSTGRES_PASSWORD}
      USER-SERVICE_URL: ${USER_SERVICE_URL}
    depends_on:
      order-service-postgres:
        condition: service_healthy

  order-service-postgres:
    image: 'postgres:16.10'
    container_name: order-service-postgres
    env_file:
      - .env
    ports:
      - '5435:5432'
    environment:
      POSTGRES_DB: ${ORDER_POSTGRES_DB}
      POSTGRES_USER: ${ORDER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${ORDER_POSTGRES_USER} -d ${ORDER_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - order-service-postgres-data:/var/lib/postgresql/data

  gateway-service:
    image: gateway-service:1.0.0
    container_name: gateway-service
    env_file:
      - .env
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - '8084:8084'
    environment:
      SERVICES_USER-SERVICE_URI: ${USER_SERVICE_URI}
      SERVICES_AUTHENTICATION-SERVICE_URI: ${AUTHENTICATION_SERVICE_URI}
      SERVICES_ORDER-SERVICE_URI: ${ORDER_SERVICE_URI}
    depends_on:
      user-service:
        condition: service_started
      authentication-service:
        condition: service_started
      order-service:
        condition: service_started

volumes:
  user-service-postgres-data:
    name: user-service-postgres-data
  user-service-redis-data:
    name: user-service-redis-data
  authentication-service-postgres-data:
    name: authentication-service-postgres-data
  order-service-postgres-data:
    name: order-service-postgres-data